#!/usr/bin/env bash
#bash script     : console.lib 
#apps            : Dialog Function Bash Lib
#description     : Console Input Dialog Library
#author		     : MRP/mrp - Mauro Rosero P.
#company email   : mauro@rosero.one
#personal email  : mauro.rosero@gmail.com
#date            : 20240201
#version         : 1.0.2
#notes           :
#==============================================================================
#==============================================================================

# Global Default Variables
CWIDTH=70
CROWS=8
CX=4
CY=2

### Yes/No
mz_yesno() {
    local label="$1"
    local rows="${2:-$CROWS}"
    local width="${3:-$CWIDTH}"

    dialog --keep-window --begin  ${CX} ${CY} --colors --no-shadow --backtitle "${title}" --title "${apps_title}" --yesno "\n${label}" ${rows} ${width}
    result=$?

    return ${result}
}

### Input Box
mz_inputbox() {
    local label="$1"
    local helper="$2"
    local v_default="$3"
    local rows="${4:-$CROWS}"
    local width="${5:-$CWIDTH}"

    exec 3>&1;
    value=$(dialog --keep-window --begin  ${CX} ${CY} --colors --no-shadow --backtitle "${title}" --title "${apps_title}" --inputbox "\n${label}\n${helper}" ${rows} ${width} "${v_default}" 2>&1 1>&3);
    codex=$?;
    exec 3>&-;

    return ${codex}
}

### Password Box
mz_inputpass(){
    local label="$1"
    local helper="$2"
    local v_default="$3"
    local rows="${4:-$CROWS}"
    local width="${5:-$CWIDTH}"

    exec 3>&1;
    value=$(dialog --keep-window --begin  ${CX} ${CY} --colors --no-shadow --backtitle "${title}" --title "${apps_title}" --passwordbox "\n${label}\n${helper}" ${rows} ${width} "${v_default}" 2>&1 1>&3);
    codex=$?;
    exec 3>&-;

    return ${codex}
}

# Radiolist
mz_radiolist() {
    local label="$1"
    local helper="$2"
    local options="$3"
    local rows="${4:-$CROWS}"
    local width="${5:-$CWIDTH}"

    # Calcular el número de elementos
    local elements=$(echo "$options" | awk '{print NF/3 + 1}')
    ((rows += elements))

    exec 3>&1;
    value=$(dialog --keep-window --begin ${CX} ${CY} --colors --no-shadow --backtitle "${title}" --title "${apps_title}" --radiolist "\n${label}\n${helper}" ${rows} ${width} ${elements} ${options} 2>&1 1>&3)
    codex=$?
    exec 3>&-;

    return ${codex}
}

# Menu Select
mz_menu() {
    local label="$1"
    local helper="$2"
    local options="$3"
    local rows="${4:-$CROWS}"
    local width="${5:-$CWIDTH}"

    # Calcular el número de elementos
    local elements=$(echo "$options" | awk '{print NF/2 + 1}')
    ((rows += elements))

    exec 3>&1;
    value=$(dialog --keep-window --begin ${CX} ${CY} --colors --no-shadow --backtitle "${title}" --title "${apps_title}" --menu "\n${label}\n${helper}" ${rows} ${width} ${elements} ${options} 2>&1 1>&3)
    codex=$?
    exec 3>&-;

    return ${codex}
}


### Select File Box Input
set_filepath(){
  local valid_file="0"
  local file_path=$1

  while [ "$valid_file" == "0" ]
  do
    exec 3>&1;
    result=$(dialog --begin 2 2 --title "${apps_title} - $2" --backtitle "${title}" --fselect ${file_path} 7 0 2>&1 1>&3);
    exitcode=$?;
    exec 3>&-;
    if [ "$exitcode" == "0" ]
    then
      if [ -f "$result" ]
      then
        file_path=${result}
        valid_file="1"
      fi
    else
      valid_file="2"
    fi
  done
}

### Error Dialog

show_error_dialog() {
    local msgtype="$1"
    local message="$2"

    # Redirigir la salida de error al descriptor de archivo 3
    exec 3>&1;

    # Mostrar el cuadro de diálogo
    dialog --backtitle "${title}" --title "${msgtype} - ${apps_title}" --msgbox "\n${message}" 8 ${CWIDTH}
    #dialog --and-widget --msgbox "\n${message}"

    exec 3>&-;
}

validate_capture() {
    local value="$2"
    local label="$3"
    local email_regex='^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
    local gpg_duration_regex="^[0-9]+([dmy])?$"

    # Verificar si se proporcionó un argumento
    if [ $# -ne 0 ]; then
        # Convertir el argumento en un array
        arr=($1)

        # Iterar sobre el array y llamar a process_element para cada elemento
        for vcode in "${arr[@]}"
        do
            case ${vcode} in
                000)
                return 0
                ;;
                001)
                if [ -z "${value}"  ]
                then
                    show_error_dialog "${head_error}" "${label} ${vldt_001}"
                    return 1
                fi
                ;;
                010)
                if [[ ! "${value}" =~ ${email_regex} ]]
                then
                    show_error_dialog "${head_error}" "${vldt_010}"
                    return 1
                fi
                ;;
                011)
                if [[ ! "${value}" =~ ${gpg_duration_regex} ]]
                then
                    show_error_dialog "${head_error}" "${vldt_011}"
                    return 1
                fi
                ;;
            esac
        done
    fi
    return 0
}

form_capture() {
    # Ciclo de captura de datos
    clear
    control=0
    while [ ${control} -lt ${c_end} ]
    do
        case ${c_mod[control]} in
            1)
            mz_inputbox "[${control}] ${c_lbl[control]}" "${c_hlp[control]}"
            if [ ${codex} -eq 0 ]
            then
                validate_capture "${c_val[control]}" "${value}" "${c_lbl[control]}"
                if [ $? -eq 0 ]
                then
                    response[control]="${value}"
                    ((control++))
                fi
            else
                case ${codex} in
                    1)
                        if [ ${control} -gt 0 ]
                        then
                            ((control--))
                        else
                            control=${c_end}
                            return 1
                        fi
                    ;;
                    255)
                        return 1
                        control=${c_end}
                    ;;
                esac
            fi
            ;;
            2)
            mz_inputpass "[${control}] ${c_lbl[control]}" "${c_hlp[control]}"
            if [ ${codex} -eq 0 ]
            then
                response[control]="${value}"
                mz_inputpass "[${control}] ${c_lbl[control]} ${head_confirm}" "${c_hlp[control]}"
                if [ ${codex} -eq 0 ]
                then
                    if [ "${response[control]}" == "${value}" ] && [ ! -z "${response[control]}" ]
                    then
                        ((control++))
                        sleep 1
                    else
                        show_error_dialog "${head_error}" "${vldt_002}"
                    fi
                else
                    if [ ${codex} -eq 255 ]
                    then
                        control=${c_end}
                        return 1
                    fi
                fi
            else
                case ${codex} in
                    1)
                        if [ ${control} -gt 0 ]
                        then
                            ((control--))
                        else
                            control=${c_end}
                            return 1
                        fi
                    ;;
                    255)
                        return 1
                        control=${c_end}
                    ;;
                esac
            fi
            ;;
            3)
            mz_radiolist "[${control}] ${c_lbl[control]}" "${c_hlp[control]}" "${c_opt[control]}"
            if [ ${codex} -eq 0 ]
            then
                response[control]="${value}"
                ((control++))
            else
                case ${codex} in
                    1)
                        if [ ${control} -gt 0 ]
                        then
                            ((control--))
                        else
                            control=${c_end}
                            return 1
                        fi
                    ;;
                    255)
                        return 1
                        control=${c_end}
                    ;;
                esac
            fi
            ;;
            4)
            mz_menu "[${control}] ${c_lbl[control]}" "${c_hlp[control]}" "${c_opt[control]}"
            if [ ${codex} -eq 0 ]
            then
                response[control]="${value}"
                ((control++))
            else
                case ${codex} in
                    1)
                        if [ ${control} -gt 0 ]
                        then
                            ((control--))
                        else
                            control=${c_end}
                            return 1
                        fi
                    ;;
                    255)
                        return 1
                        control=${c_end}
                    ;;
                esac
            fi
            ;;
        esac
    done
}
